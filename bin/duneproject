#!/usr/bin/env bash
# -*- indent-tabs-mode: nil; sh-basic-offset: 2; sh-indentation: 2 -*-
# vi: set et sw=2:

# The sh-indentation in the emacs mode-line is needed for emacs <26, see
# https://debbugs.gnu.org/21751

#
# TODO:
#
# * Check module names entered as dependencies.

set -e

canonicalname(){
  if test $# -ne 1; then
    echo Usage: canonicalname path >&2
    return 1
  fi
  file="`eval echo $1`" # expand ~
  if test ! -e "$file"; then
    echo $file: file not found >&2
    return 1
  fi
  # if this is a symlink, then follow the symlink
  if test -L "$file"; then
    fdir="`dirname \"$file\"`"
    flink="`readlink \"$file\"`"
    if test -e "$flink"; then
      # these are absolute links, or links in the CWD
      canonicalname "$flink"
    else
      canonicalname "$fdir/$flink"
    fi
  else
    # if this is a file, then remember the filename and
    # canonicalize the directory name
    if test -f "$file"; then
      fdir="`dirname \"$file\"`"
      fname="`basename \"$file\"`"
      fdir="`canonicalname \"$fdir\"`"
      echo "$fdir/$fname"
    fi
    # if this is a directory, then create an absolute
    # directory name and we are done
    if test -d "$file"; then
      (cd "$file"; pwd)
    fi
  fi
}

canonicalpath(){
  if test $# -ne 1; then
    echo Usage: canonicalpath path >&2
    return 1
  fi
  dirname "$(canonicalname "$1")"
}

pkg_config_dependencies(){
  if test $# -ne 1; then
    echo Usage: pkg_config_dependencies name >&2
    return 1
  fi
  name="$1"
  depends="`pkg-config --variable=DEPENDENCIES $name| sed -e 's/,/ /g'`"
  for pkg in $depends; do
    depends="$depends `pkg_config_dependencies $pkg`"
  done
  echo $depends
}

# modulesexist DEPS MODULES
#
# DEPS is a space seperated list of modules the new module should depend on
# MODULES is a space seperated list of modules that are known to be present
#
# Each name in DEPS is checked to see wether it is present in MODULES.  If
# not, is is checked whether it can be found with pkg-config.  If still no, an
# error message is issued and modulesexist will return with an exit status
# indicating failure.
modulesexist(){
  local status dep found
  status=0

  for dep in $1; do
    found=false
    if [[ " $2 " == *" $dep "* ]]; then
      found=true
    fi
    # If module not found in list, try pkg-config
    if ! $found && pkg-config $dep &> /dev/null; then
       found=true
    fi
    if ! $found; then
      echo "ERROR:">&2
      echo "Module with name $dep was not found" >&2
      echo "Did you forget to specify its location" >&2
      echo "in the DUNE_CONTROL_PATH variable?">&2
      echo >&2
      status=1
    fi
  done

  return $status
}

make_unique(){
  if [ "$#" = "1" ]; then
    # take first word
    for exclude_word in $1; do
      break;
    done
    make_unique $exclude_word "$1" 0
  else
    local exclude_word="$1"
    local words="$2"
    local pos="$3"
    local length=0
    local i=0
    local new_words=""
    local cur=0
    for word in $words; do
      if [ $i -le $pos ]; then
	i=$((i+1))
	length=$((length+1))
	new_words="$new_words $word"
	continue
      fi
      if [ "$word" != "$exclude_word" ]; then
	new_words="$new_words $word"
	if [ "$((length-1))" = "$pos" ]; then
	  next_word="$word"
	fi
	length=$((length+1))
      fi
    done
    if [ "$pos" -lt "$length" ]; then
      # process next word
      make_unique "$next_word" "$new_words" $((pos+1))
    else
      export UNIQUE_WORDS="$new_words"
    fi
  fi
}

echo
echo == Dune project/module generator ==
echo
echo duneproject will assist you in the creation of a new Dune application.
echo During this process a new directory with the name of your project will be
echo created. This directory will hold all configuration and Makefiles and a
echo simple example application.
echo

################## FIND AVAILABLE MODULES ##################

. "$(canonicalpath $0)/../lib/dunemodules.lib"

export PREFIX_DIR="`canonicalpath "$0"`/.."

# extract_multiarch_pkg_config_path

# # search for modules, both installed and src modules
# find_modules_in_path

# # sort modules to remove duplicates
# sort_modules $FOUND_MODULES
# FOUND_MODULES=$MODULES

# # get the real module names
MODULES=""
# for i in $FOUND_MODULES; do
#   mod=$(eval echo \$NAME_$i)
#   MODULES="$MODULES$mod "
# done

# if [ "$MODULES" = "" ]; then
#   echo "ERROR:">&2
#   echo "  No dune modules were found!">&2
#   echo "  Did you forget to specify the places where ">&2
#   echo "  you installed your modules in the ">&2
#   echo "  DUNE_CONTROL_PATH environment variable">&2
#   echo "  and adjusted the PKG_CONFIG_PATH environment">&2
#   echo "  accordingly?" >&2
#   exit 1;
# fi

################## READ CMDLINE OPTIONS ##########
PROJECT="$1"
DEPENDENCIES="$2"
VERSION="$3"
MAINTAINER="$4"

################## READ OPTIONS ##################

while [ "$DATACORRECT" != "y" -a "$DATACORRECT" != "Y" ]; do

  while [ -z $PROJECT ]; do
    read -p "1) Name of your new Project? (e.g.: dune-grid): " PROJECT
    if echo "$MODULES" | grep -q ^$PROJECT$; then
      read -p "   A module named $PROJECT already exists. Continue anyway? [y/N] " CONT
      if test x$DELETE = xy -o x$DELETE = xY; then
        PROJECT=""
      fi
    elif echo "$PROJECT" | grep -q "\."; then
      echo "The Name contains a dot (.) which is not allowed."
      PROJECT=""
    fi
  done
  MODULE="$PROJECT"

  DEPOK=1

  # while [ "$DEPOK" != 0 ]; do
    echo "2) Which modules should this module depend on?"
    # echo "   The following modules have been found:"
    # echo "   $MODULES"
    #  for i in $MODULES; do echo -n " $i"; done
    #  echo ""
    while [ -z "$DEPENDENCIES" ]; do
      read -p "   Enter space-separated list: " DEPENDENCIES
    done
    set +e
    # modulesexist "$DEPENDENCIES" "$MODULES"
    # DEPOK=$?
    # set -e
    # if [ "$DEPOK" != 0 ]; then
    #   DEPENDENCIES=""
    # fi
  # done

  while [ -z $VERSION ]; do
    read -p "3) Project/Module version? " VERSION
  done
  while [ -z "$MAINTAINER" ]; do
    read -p "4) Maintainer's email address? " MAINTAINER
  done

  echo
  echo "creating Project \"$PROJECT\", version $VERSION "
  echo "which depends on \"$DEPENDENCIES\""
  echo "with maintainer \"$MAINTAINER\""
  read -p "Are these informations correct? [y/N] " DATACORRECT

  # reset data if necessary
  if [ "$DATACORRECT" != "y" -a "$DATACORRECT" != "Y" ]; then
    PROJECT=""
    DEPENDENCIES=""
    VERSION=""
    MAINTAINER=""
  fi

done



echo
echo "A sample code $MODULE.cc is generated in the \"$PROJECT\" directory."
echo "Look at the README and dune.module files there."
echo "Now you can run the dunecontrol script which will setup the new module."
echo "Sometimes you may have to tweak CMakeLists.txt a bit."

if test -d $PROJECT; then
  echo WARNING:
  echo "A directory with the name $PROJECT already exists."
  echo "Do you want to continue anyway?"
  read -p "Type Y to overwrite the old directory, N to abort. [y/N] " DELETE
  if test x$DELETE != xy -a x$DELETE != xY; then
    echo Abort...
    exit 1
  fi
  rm -rf "$PROJECT"
fi
mkdir "$PROJECT"

################## dune.module ##################
cat > "$PROJECT/dune.module" <<C_DELIM
################################
# Dune module information file #
################################

# Name of the module
Module: $MODULE
Version: $VERSION
Maintainer: $MAINTAINER
# Required build dependencies
Depends: $DEPENDENCIES
# Optional build dependencies
#Suggests:
C_DELIM

## Create the parameters passed to DUNE_CHECK_ALL

# save module list of dunemodules.inc
save_MODULES=$MODULES
for name in $DEPENDENCIES; do
  mod="`fix_variable_name $name`"
  if test "x$(eval echo \$HAVE_$mod)" != "x"; then
    # found via dunemodules.inc
    sort_modules "$mod"
    for mod in $MODULES; do
      M_DEPS="$M_DEPS $(eval echo \$NAME_$mod)"
    done
    MODULES=$save_MODULES
  else
    # found via pkg-config
    M_DEPS="`pkg_config_dependencies $name` $name"
  fi
  for dep in $M_DEPS; do
    CHECK="$CHECK [$dep]"
  done
done
set +x
make_unique "$CHECK"

# insert , between modules
j=0
for dep in $UNIQUE_WORDS; do
  if [ "$j" = "0" ]; then
    CHECK="$dep"
    j=1
  else
    CHECK="$CHECK, $dep"
  fi
done

echo "------------------------------------------"
echo "writing initial files:"

# complete module name with _ instead of - to not confuse automake
fix_and_assign CMODULE $MODULE
# module name without prefix "dune-"
NAME=`echo $PROJECT | sed -e 's/dune[_-]//'`
# $NAME with _ instead of - to not confuse automake
NAME_=`echo $NAME | tr '-' '_'`
# module name in uppercase with _ instead of -
UNAME=`echo $PROJECT | tr '-' '_' | sed 's/\(.*\)/\U\1/'`

################## README ##################
echo "- $PROJECT/README"
cat > "$PROJECT/README" <<R_DELIM
Preparing the Sources

################## README ##################
echo "- $PROJECT/README.md"
cat > "$PROJECT/README.md" <<R_DELIM
## Configuration
Configure your project with CMake!
R_DELIM

LINK_DEPENDENCIES=""
FIND_DEPENDENCIES=""
FIND_DEPENDENCIES_PACKAGE=""
NL=$'\n'
for DEPENDENCY in $DEPENDENCIES; do
  LINK_DEPENDENCIES="${LINK_DEPENDENCIES}target_link_libraries($PROJECT PUBLIC Dune::$DEPENDENCY)${NL}"
  FIND_DEPENDENCIES="${FIND_DEPENDENCIES}find_dependency($DEPENDENCY)${NL}"
  FIND_DEPENDENCIES_PACKAGE="${FIND_DEPENDENCIES_PACKAGE}find_package($DEPENDENCY CONFIG REQUIRED)${NL}"
done

################## CMakeLists.txt ##################
echo "- $PROJECT/CMakeLists.txt"
cat> "$PROJECT/CMakeLists.txt" << M_DELIM
cmake_minimum_required(VERSION 3.13)
project($PROJECT VERSION 2.8.0 LANGUAGES C CXX)

list(APPEND CMAKE_MODULE_PATH \${PROJECT_SOURCE_DIR}/cmake/modules)

find_package(dune-common CONFIG REQUIRED)

include(DuneMacros)
include($rawmacroname)

# create a new library target
dune_project()

# module dependencies
${LINK_DEPENDENCIES%?}

# traverse all other directories
add_subdirectory(cmake/modules)
add_subdirectory(dune)

finalize_dune_project(GENERATE_CONFIG_H_FILE)
M_DELIM

###############################################################
################## The source subdirectory ####################
###############################################################

mkdir "$PROJECT/src"

################## src/CMakeLists.txt ##################

echo "- $PROJECT/src/CMakeLists.txt"
cat> "$PROJECT/src/CMakeLists.txt" << M_DELIM
add_executable(${MODULE} ${MODULE}.cc)
target_link_libraries(${MODULE} PRIVATE Dune::$PROJECT)
M_DELIM

################## PROJECT.CC ##################
echo "- $PROJECT/src/$MODULE.cc"
cat> "$PROJECT/src/$MODULE.cc" << CC_DELIM
// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:

#include <iostream>
#include <dune/common/common.hh>

int main(int argc, char** argv)
{}
CC_DELIM

################################################################
################## The headers subdirectory ####################
################################################################

echo "- $PROJECT/dune/$NAME"
mkdir "$PROJECT/dune"
mkdir "$PROJECT/dune/$NAME"

################## dune/CMakeLists.txt #################
echo "- $PROJECT/dune/CMakeLists.txt"
cat> $PROJECT/dune/CMakeLists.txt <<EOF
add_subdirectory($NAME)
EOF

################## dune/$NAME/CMakeLists.txt ###########
echo "- $PROJECT/dune/$NAME/CMakeLists.txt"
cat> $PROJECT/dune/$NAME/CMakeLists.txt <<EOF
target_sources($PROJECT
  PRIVATE
    \${CMAKE_CURRENT_LIST_DIR}/$NAME.cc )

install(FILES $NAME.hh
  DESTINATION
    \${CMAKE_INSTALL_INCLUDEDIR}/dune/$NAME )
EOF

################## dune/$NAME/$NAME.hh #################
echo "- $PROJECT/dune/$NAME/$NAME.hh"
cat> $PROJECT/dune/$NAME/$NAME.hh <<EOF
#ifndef ${UNAME}_HH
#define ${UNAME}_HH

// add your classes here

#endif // ${UNAME}_HH
EOF


################## dune/$NAME/$NAME.hh #################
echo "- $PROJECT/dune/$NAME/$NAME.cc"
cat> $PROJECT/dune/$NAME/$NAME.cc <<EOF
#include "$NAME.hh"
EOF

###############################################################
################## The doc subdirectory #######################
###############################################################

mkdir "$PROJECT/doc"

################## doc/CMakeLists.txt #################
echo "- $PROJECT/doc/CMakeLists.txt"
cat> "$PROJECT/doc/CMakeLists.txt" << CC_DELIM
add_subdirectory("doxygen")
CC_DELIM

###############################################################
############### The doc/doxygen subdirectory ##################
###############################################################

mkdir "$PROJECT/doc/doxygen"

#################### basic Doxylocal ##########################

echo "- $PROJECT/doc/doxygen/Doxylocal"
if [ "x`which doxygen`" == "x" ]; then
    echo "Doxygen is not installed! Your documentation will not work without it."
fi
# Where to search and which files to use
cat> $PROJECT/doc/doxygen/Doxylocal << CC_DELIM
# This file contains local changes to the doxygen configuration
# please use '+=' to add files/directories to the lists

# The INPUT tag can be used to specify the files and/or directories that contain
# documented source files. You may enter file names like "myfile.cpp" or
# directories like "/usr/src/myproject". Separate the files or directories
# with spaces.

INPUT                 += @top_srcdir@/dune/
# see e.g. dune-grid for the examples of mainpage and modules
# INPUT                 += @srcdir@/mainpage \\
#                          @srcdir@/modules

# The EXCLUDE tag can be used to specify files and/or directories that should
# be excluded from the INPUT source files. This way you can easily exclude a
# subdirectory from a directory tree whose root is specified with the INPUT tag.

# EXCLUDE               += @top_srcdir@/dune/$NAME/test

# The EXAMPLE_PATH tag can be used to specify one or more files or
# directories that contain example code fragments that are included (see
# the \include command).

# EXAMPLE_PATH          += @top_srcdir@/src

# The IMAGE_PATH tag can be used to specify one or more files or
# directories that contain image that are included in the documentation (see
# the \image command).

# IMAGE_PATH            += @top_srcdir@/dune/$NAME/pics
CC_DELIM

################# doc/doxygen/CMakeLists.txt #####################

echo "- $PROJECT/doc/doxygen/CMakeLists.txt"
cat> "$PROJECT/doc/doxygen/CMakeLists.txt" << CC_DELIM
# TODO: shortcut for creating the Doxyfile.in and Doxyfile
CC_DELIM

#########################################################
############### The cmake subdirectory ##################
#########################################################

mkdir "$PROJECT/cmake"

#########################################################
############### The cmake/modules subdirectory ##########
#########################################################

mkdir "$PROJECT/cmake/modules"

################# cmake/modules/CMakeLists.txt #####################

echo "- $PROJECT/cmake/modules/CMakeLists.txt"
cat> "$PROJECT/cmake/modules/CMakeLists.txt" <<EOF
EOF

################# cmake/modules/$macroname #####################

echo "- $PROJECT/cmake/modules/$macroname"
cat> "$PROJECT/cmake/modules/$macroname" <<EOF
# required dependencies
${FIND_DEPENDENCIES_PACKAGE%?}
EOF

################# cmake/modules/$configname #####################

echo "- $PROJECT/cmake/modules/$configname"
cat> "$PROJECT/cmake/modules/$configname" <<EOF
@PACKAGE_INIT@

# Find dependencies and stop package config if required ones are not found
include(CMakeFindDependencyMacro)

set(@PROJECT_NAME@_PREFIX @CMAKE_CURRENT_LIST_DIR@)
set(@PROJECT_NAME@_MODULE_PATH \${CMAKE_CURRENT_LIST_DIR})
set(@PROJECT_NAME@_LIBRARIES Dune::@PROJECT_NAME@)

list(APPEND CMAKE_MODULE_PATH \${CMAKE_CURRENT_LIST_DIR})

${FIND_DEPENDENCIES%?}

# include the configuration of exported targets
include("\${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake")

# Finish package configuration:
# checks whether all requested, non-optional components have been found,
# and if this is not the case, sets the @PROJECT_NAME@_FOUND variable to FALSE
check_required_components("@PROJECT_NAME@")
EOF


#################           done           #####################

echo
echo "done."
echo "------------------------------------------"
echo "For further details read the Dune build system documentation at"
echo "https://www.dune-project.org/buildsystem/"
